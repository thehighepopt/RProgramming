num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Heinrich Von Hoffenpuss")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world", sep = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X","Y","Z"), sep = "")
paste(LETTERS,1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 100)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector <- c4,5)
dim(my_vector) <- (c4,5)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
bye()
swirl()
library(swirl)
swirl()
?matrix
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix, my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,6,6))
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
length(unique_vals)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags, unique,numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags@animate)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population,flags$landmass,summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1),100,replace = TRUE, prob = c(o.3, 0.7))
sample(c(0,1),100,replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1),100,replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean = 100, sd = 25)
?rpois
rpois(5, lambda = 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
class(my_pois)
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
d1 <- sys.date()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d3)
unclass(d2)
t1 <- Sys.Time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.Time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unlcass(t2))
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
rm(list=ls())
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
d <- list.files(directory, full.names=TRUE)
poldat <- data.frame()
for (i in 1:332) {
poldat <- rbind(poldat, read.csv(d[i]))
}
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
IDsub <- poldat[which(poldat[, "ID"] %in% id),]
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
outputdf <- data.frame()
for (id in unique(IDsub$ID)) {
tmp <- subset(poldat, ID == id)
nobs <- sum(complete.cases(tmp))
outputdf <- rbind(outputdf, data.frame(id,nobs))
}
outputdfinstall.packages("swirl")
}
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
d <- list.files(directory, full.names=TRUE)
poldat <- data.frame()
for (i in 1:332) {
poldat <- rbind(poldat, read.csv(d[i]))
}
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
IDsub <- poldat[which(poldat[, "ID"] %in% id),]
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
outputdf <- data.frame()
for (id in unique(IDsub$ID)) {
tmp <- subset(poldat, ID == id)
nobs <- sum(complete.cases(tmp))
outputdf <- rbind(outputdf, data.frame(id,nobs))
}
outputdf
}
complete("specdata", 30:15)
library(swirl)
install_from_swirl("Data Analysis")
swirl()
library(swirl)
install_from_swirl("Data Analysis")
swirl()
library(swirl)
install_from_swirl("Data_Analysis")
swirl()
library(swirl)
install_from_swirl("Open Intro")
swirl()
install.packages(plyr)
install.packages("plyr")
install.packages("C:/Users/Stephen.P.Duffy/Desktop/plyr_1.8.1.zip", repos = NULL)
outcomes <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outsub <- outcomes[, c(7,2,11,17,23)]
colnames(outsub) <- c("State","Hospital","attack", "failure", "pneumonia")
getwd()
setwd("C:/Users/Stephen.P.Duffy/Desktop/CourseraR/RProgramming/Asmt3")
outcomes <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outsub <- outcomes[, c(7,2,11,17,23)]
colnames(outsub) <- c("State","Hospital","attack", "failure", "pneumonia")
a <- 3
nonas <- (outsub[complete.cases(as.numeric(outsub[,a])),])
ordered <- nonas[order(nonas[,1],as.numeric(nonas[,a]),nonas[,2]),]
byState <- split(ordered, ordered$State)
head(byState)
require(stats)
by(warpbreaks[, 1:2], warpbreaks[,"tension"], summary)
str(warpbreaks)
by(ordered[, 2], ordered[,1], min)
byState[[1]]
m <- ordered[1:5,]
m
by(m[, 2], m[,1], min)
class(m)
m <- ordered[1:10,]
m
by(m[, 2], m[,1], summary)
m <- ordered[1:5,]
lapply(byState, function(x) x[1,1:2])
h <- as.data.frame(lapply(byState, function(x) x[1,1:2]))
h
head(h)
h <- lapply(byState, function(x) x[1,1:2])
head(h)
num <- 5
h <- lapply(byState, function(x) x[num,1:2])
head(h)
class(h)
j <- unlist(h)
head(j)
class(j)
data.frame(j)
class(j)
j <- data.frame(matrix(unlist(h)))
class(j)
head(j)
rm(j)
head(h)
class(h)
j <- data.frame(matrix(unlist(l), byrow=T))
j <- data.frame(matrix(unlist(h), byrow=T))
head(j)
j <- data.frame(unlist(h), byrow=T)
head(j)
head(h)
class(h)
l.ex <- list(a = list(1:5, LETTERS[1:5]), b = "Z", c = NA)
l.ex
unlist(l.ex, recursive = FALSE)
unlist(l.ex, recursive = FALSE)
unlist(l.ex, recursive = TRUE)
j <- unlist(h)
head(j)
class(j)
j ,- unlist(h, recursive = FALSE)
j <- unlist(h, recursive = FALSE)
head(j)
class(j)
j <- unlist(h)
j <- as.data.frame(unlist(h))
head(j)
j <- as.data.frame(as.matrix(unlist(h)))
head(j)
j <- as.data.frame(unlist(h))
j <- do.call("rbind", h)
head(j)
b <- do.call("rbind", lapply(byState, function(x) x[1,1:2]))
head(b)
tail(b, n = 1)
tail(b)
length(b)
nrows(b)
nrow(b)
b <- do.call("rbind", lapply(byState, function(x) x[nrow(x),1:2]))
head(b)
rm(b,j,m,nonas)
rm(ordered, outcomes, outsub)
rm(a,byState,h,l.ex)
rm(num)
rankall <- function(outcome, num = "best") {
outcomes <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outsub <- outcomes[, c(7,2,11,17,23)]
colnames(outsub) <- c("State","Hospital","attack", "failure", "pneumonia")
## Check that state and outcome are valid
#if(!is.element(state, unique(outcomes$State))) stop("invalid state")
if(!is.element(outcome, c("heart attack","heart failure","pneumonia"))) stop("invalid outcome")
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
if (outcome == "heart attack") {
a <- 3
} else if (outcome == "heart failure") {
a <- 4
} else {a <- 5}
nonas <- (outsub[complete.cases(as.numeric(outsub[,a])),])
ordered <- nonas[order(nonas[,1],as.numeric(nonas[,a]),nonas[,2]),]
byState <- split(ordered, ordered$State)
if (num == "best") {
b <- do.call("rbind", lapply(byState, function(x) x[1,1:2]))
}     else if (num == "worst") {
b <- do.call("rbind", lapply(byState, function(x) x[nrow(x),1:2]))
}     else {b <- do.call("rbind", lapply(byState, function(x) x[num,1:2]))
}
b
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
outcomes <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outsub <- outcomes[, c(7,2,11,17,23)]
colnames(outsub) <- c("State","Hospital","attack", "failure", "pneumonia")
## Check that state and outcome are valid
#if(!is.element(state, unique(outcomes$State))) stop("invalid state")
if(!is.element(outcome, c("heart attack","heart failure","pneumonia"))) stop("invalid outcome")
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
if (outcome == "heart attack") {
a <- 3
} else if (outcome == "heart failure") {
a <- 4
} else {a <- 5}
nonas <- (outsub[complete.cases(as.numeric(outsub[,a])),])
ordered <- nonas[order(nonas[,1],as.numeric(nonas[,a]),nonas[,2]),]
byState <- split(ordered, ordered$State)
if (num == "best") {
b <- do.call("rbind", lapply(byState, function(x) x[1,2:1]))
}     else if (num == "worst") {
b <- do.call("rbind", lapply(byState, function(x) x[nrow(x),2:1]))
}     else {b <- do.call("rbind", lapply(byState, function(x) x[num,2:1]))
}
b
}
head(rankall("heart attack", 20), 10)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit
submit()
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
outcomes <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outsub <- outcomes[, c(7,2,11,17,23)]
colnames(outsub) <- c("state","hospital","attack", "failure", "pneumonia")
## Check that state and outcome are valid
#if(!is.element(state, unique(outcomes$State))) stop("invalid state")
if(!is.element(outcome, c("heart attack","heart failure","pneumonia"))) stop("invalid outcome")
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
if (outcome == "heart attack") {
a <- 3
} else if (outcome == "heart failure") {
a <- 4
} else {a <- 5}
nonas <- (outsub[complete.cases(as.numeric(outsub[,a])),])
ordered <- nonas[order(nonas[,1],as.numeric(nonas[,a]),nonas[,2]),]
byState <- split(ordered, ordered$State)
if (num == "best") {
b <- do.call("rbind", lapply(byState, function(x) x[1,2:1]))
}     else if (num == "worst") {
b <- do.call("rbind", lapply(byState, function(x) x[nrow(x),2:1]))
}     else {b <- do.call("rbind", lapply(byState, function(x) x[num,2:1]))
}
b
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
outcomes <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outsub <- outcomes[, c(7,2,11,17,23)]
colnames(outsub) <- c("state","hospital","attack", "failure", "pneumonia")
## Check that state and outcome are valid
#if(!is.element(state, unique(outcomes$State))) stop("invalid state")
if(!is.element(outcome, c("heart attack","heart failure","pneumonia"))) stop("invalid outcome")
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
if (outcome == "heart attack") {
a <- 3
} else if (outcome == "heart failure") {
a <- 4
} else {a <- 5}
nonas <- (outsub[complete.cases(as.numeric(outsub[,a])),])
ordered <- nonas[order(nonas[,1],as.numeric(nonas[,a]),nonas[,2]),]
byState <- split(ordered, ordered$state)
if (num == "best") {
b <- do.call("rbind", lapply(byState, function(x) x[1,2:1]))
}     else if (num == "worst") {
b <- do.call("rbind", lapply(byState, function(x) x[nrow(x),2:1]))
}     else {b <- do.call("rbind", lapply(byState, function(x) x[num,2:1]))
}
b
}
head(rankall("heart attack", 20), 10)
submit()
submit()
submit()
rankall("heart failure", 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
rankall <- function(outcome, num = "best") {
outcomes <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outsub <- outcomes[, c(7,2,11,17,23)]
colnames(outsub) <- c("state","hospital","attack", "failure", "pneumonia")
## Check that state and outcome are valid
#if(!is.element(state, unique(outcomes$State))) stop("invalid state")
if(!is.element(outcome, c("heart attack","heart failure","pneumonia"))) stop("invalid outcome")
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
if (outcome == "heart attack") {
a <- 3
} else if (outcome == "heart failure") {
a <- 4
} else {a <- 5}
nonas <- (outsub[complete.cases(as.numeric(outsub[,a])),])
ordered <- nonas[order(nonas[,1],as.numeric(nonas[,a]),nonas[,2]),]
byState <- split(ordered, ordered[,2])
if (num == "best") {
b <- do.call("rbind", lapply(byState, function(x) x[1,2:1]))
}     else if (num == "worst") {
b <- do.call("rbind", lapply(byState, function(x) x[nrow(x),2:1]))
}     else {b <- do.call("rbind", lapply(byState, function(x) x[num,2:1]))
}
b
}
tail(rankall("heart failure"), 10)
rankall <- function(outcome, num = "best") {
outcomes <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outsub <- outcomes[, c(7,2,11,17,23)]
colnames(outsub) <- c("state","hospital","attack", "failure", "pneumonia")
## Check that state and outcome are valid
#if(!is.element(state, unique(outcomes$State))) stop("invalid state")
if(!is.element(outcome, c("heart attack","heart failure","pneumonia"))) stop("invalid outcome")
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
if (outcome == "heart attack") {
a <- 3
} else if (outcome == "heart failure") {
a <- 4
} else {a <- 5}
nonas <- (outsub[complete.cases(as.numeric(outsub[,a])),])
ordered <- nonas[order(nonas[,1],as.numeric(nonas[,a]),nonas[,2]),]
byState <- split(ordered, ordered$state)
if (num == "best") {
b <- do.call("rbind", lapply(byState, function(x) x[1,2:1]))
}     else if (num == "worst") {
b <- do.call("rbind", lapply(byState, function(x) x[nrow(x),2:1]))
}     else {b <- do.call("rbind", lapply(byState, function(x) x[num,2:1]))
}
b
}
tail(rankall("heart failure"), 10)
?rep
rep(1:4, c(2,2,2,2))
rep(1:4, 2)
submit()
submit()
submit()
